{"meta":{"title":"wororo","subtitle":"wororo","description":"proyectos, ideas, tecnología, ocio","author":"Gabriel De La Parra","url":"http://gabrieldelaparra.github.io"},"pages":[],"posts":[{"title":"djangoHeroku","slug":"djangoHeroku","date":"2017-09-23T22:18:16.000Z","updated":"2017-11-02T03:22:09.021Z","comments":true,"path":"2017/09/23/djangoHeroku/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/23/djangoHeroku/","excerpt":"","text":"Base Django-HerokuGit should be installed Virtual EnvironmentRequirements12sudo pip install virtualenvsudo pip install virtualenvwrapper Create a Virtual Environment123$ mkvirtualenv djangoApp$ workon Scripts/activate$ mkdir djangoApp DjangoRequirements123456789101112$ pip install Django$ pip install python_dotenv``` ## Create Project``` bash$ cd djangoApp$ django-admin.py startproject --template=https://github.com/heroku/heroku-django-template/archive/master.zip --name=Procfile myHerokuProject$ cd myHerokuProject$ pip install -r requirements.txt$ echo &quot;db.sqlite3&quot; &gt;&gt; .gitignore Remove Secret Key (Using python_dotenv)123$ echo \"python_dotenv\" &gt;&gt; requirements.txt$ cd myHerokuProject$ touch .env Move SECRET_KEY=key to the .env file (should be in the same folder as settings.py) Add the following lines to your settings.py: 123456...from dotenv import load_dotenv, find_dotenv...load_dotenv(find_dotenv())SECRET_KEY = os.environ.get('SECRET_KEY')... 1$ cd .. GithubCreate Github Repo myHerokuProjectGit12345$ git init$ git remote add origin https://github.com/githubUsername/*myHerokuProjectGit*.git$ git add -A$ git commit -m \"django template initial commit\"$ git push -u origin master HerokuRequirements$ wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh Create Heroku App$ heroku login $ heroku create example-project-name $ heroku config:set DISABLE_COLLECTSTATIC=1 Heroku Web: Settings Tab -&gt; Reveal Config Vars -&gt; Add: SECRET_KEY : secret key value Heroku Web: Deploy Tab -&gt; Connect to Github -&gt; Connect -&gt; Enable Automatic Deploys $ git push heroku master Django in HerokuMigrate$ heroku run python manage.py migrate Create Admin$ heroku run python manage.py createsuperuser","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://gabrieldelaparra.github.io/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://gabrieldelaparra.github.io/tags/Django/"},{"name":"Heroku","slug":"Heroku","permalink":"http://gabrieldelaparra.github.io/tags/Heroku/"}]},{"title":"freshStart","slug":"freshStart","date":"2017-09-16T23:40:34.000Z","updated":"2017-11-02T03:21:03.817Z","comments":true,"path":"2017/09/16/freshStart/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/16/freshStart/","excerpt":"","text":"Ubuntu from scratchIt’s been a while since I last formatted and wasted a whole day doing this. So. I just documented everything for future uses. :) Git1234$ sudo apt install git$ git config --global user.email \"ignacio.delaparra@gmail.com\"$ git config --global user.name \"Gabriel De La Parra\"$ git config --global credential.helper 'cache --timeout=14400' #4 horas Create SSH Key for git1234$ ssh-keygen -t rsa -b 4096 -C \"ignacio.delaparra@gmail.com\"$ ssh-add ~/.ssh/id_rsa$ sudo apt install xclip$ xclip -sel clip &lt; ~/.ssh/id_rsa.pub Add to github via web. Vim1$ sudo apt install vim Pip1$ sudo apt install python3-pip VSCode Download. Install. Markdown Plugins hnw.vscode-auto-open-markdown-preview yzhang.markdown-all-in-one telesoho.vscode-markdown-paste-image mdickin.markdown-shortcuts evilz.vscode-reveal Bash autocomplete ignore case12$ if [ ! -a ~/.inputrc ]; then echo '$include /etc/inputrc' &gt; ~/.inputrc; fiecho 'set completion-ignore-case On' &gt;&gt; ~/.inputrc Oh-my-ZSH12$ sudo apt install zsh$ sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" Add to .zshrc:12345ZSH_THEME=&quot;agnoster&quot;plugins=(git python django heroku node pip virtualenv zsh-autosuggestions)alias py=&quot;python3&quot;alias pip=&quot;pip3&quot; Hack Font Download. Install. Terminator1$ sudo apt install terminator Cambiar font por Hack. zsh-autosuggestions1$ git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions Add to .zshrc: (included before)1plugins=(zsh-autosuggestions) Node via nvm1$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash Add to .zshrc:123export NVM_DIR=\"$HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" [ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\" 1$ nvm install stable Virtual Environments12sudo pip install virtualenvsudo pip install virtualenvwrapper Add to .zshrc:12345export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/Develexport VIRTUALENVWRAPPER_SCRIPT=/usr/local/bin/virtualenvwrapper.shexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3source /usr/local/bin/virtualenvwrapper_lazy.sh Cheat Sheet Run: workon A list of environments, empty, is printed. Run: mkvirtualenv temp A new environment, temp is created and activated. Run: workon This time, the temp environment is included. Run: deactivate to exit the environment.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://gabrieldelaparra.github.io/tags/Python/"},{"name":"Github","slug":"Github","permalink":"http://gabrieldelaparra.github.io/tags/Github/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://gabrieldelaparra.github.io/tags/Ubuntu/"},{"name":"ZSH","slug":"ZSH","permalink":"http://gabrieldelaparra.github.io/tags/ZSH/"},{"name":"VirtualEnv","slug":"VirtualEnv","permalink":"http://gabrieldelaparra.github.io/tags/VirtualEnv/"}]},{"title":"hexoBlog","slug":"hexoBlog","date":"2017-09-10T02:25:32.000Z","updated":"2017-11-02T03:20:56.709Z","comments":true,"path":"2017/09/09/hexoBlog/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/09/hexoBlog/","excerpt":"","text":"Creating a GithubPage Blog with HexoGithub Pages Github Web: Create repo called username.github.io, where username is your username. In my case: https://github.com/gabrieldelaparra/gabrieldelaparra.github.io Github Web: Create another (private) repo called hexoBlog, where your hexo blog will be stored. In my case: https://github.com/gabrieldelaparra/hexoBlog Install Hexo1$ npm install -g hexo-cli Create Blog123$ hexo init hexoBlog$ cd hexoBlog$ npm install Test Server1$ hexo server Set User Information1$ vi _config.yml _config.yml: 123456789101112131415161718192021222324252627282930# Sitetitle: wororosubtitle: wororo.description: proyectos, ideas, tecnología, ocioauthor: Gabriel De La Parralanguage: entimezone: America/Santiago# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://gabrieldelaparra.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Writingnew_post_name: :year-:month-:day-:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: Connect to git12345$ git init$ git remote add origin https://github.com/gabrieldelaparra/hexoBlog.git$ git add .$ git commit -m &quot;Empty Hexo Blog&quot;$ git push -u origin master ThemesArcher123$ cd hexoBlog$ npm install hexo-generator-json-content --save$ git clone https://github.com/fi3ework/hexo-theme-archer.git themes/archer _config.yml:1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: archer themes/archer/_config.yml: 1234567891011121314151617181920212223242526# ========== Profile ========== #avatar: /avatar/me.jpgauthor: gabrieldelaparrasignature: wororosocial: email: ignacio.delaparra@gmail.com github: //github.com/gabrieldelaparra twitter: //twitter.com/gabeldelaostia # facebook: # instagram: # stack-overflow: # linkedin: # others: # rss: /atom.xmlabout: enable: false image: '/intro/about-page.jpg'# ========== Site ========== #SEO_title: wororomain_title: wororo.subtitle: proyectos, ideas, tecnología, ociosite_header_image: '/intro/back1.jpg'post_header_image: '/intro/back1.jpg'_404_image: '/intro/404.jpg'show_dates: Help!I’m not sure how to properly handle the following: The archer theme is another git repo inside my hexoBlog repo (submodule, maybe, but). I want to be able to save my themes/archer/_config.yml to my repository. This for the case where I want to clone my own repository in another computer, or plain backup. If I just do a git clone archer, and then delete the .git folder, then the files will be added to my repo, but then, I will not get any updates to the theme if the owner adds new features. I think that I could do a fork and then merge changes manually in the future. I’m not sure how submodules work right now. Any suggestions? Deployment to Git12$ npm install hexo-deployer-git --save$ vi _config.yml _config.yml: 12345# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/gabrieldelaparra/gabrieldelaparra.github.io Adding new Posts and DeployingCreate Post1234$ hexo new postNameINFO Created: ~/blog/source/_posts/YYYY-MM-dd-postName.md$ code source/_posts/YYYY-MM-dd-postName.md Deploy12$ hexo clean$ hexo deploy -g","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://gabrieldelaparra.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"http://gabrieldelaparra.github.io/tags/Github/"}]},{"title":"firstBorn","slug":"firstBorn","date":"2017-09-03T00:48:56.000Z","updated":"2017-11-02T03:20:29.669Z","comments":true,"path":"2017/09/02/firstBorn/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/02/firstBorn/","excerpt":"","text":"Nace un BlogHabía estado mucho tiempo pensando en hacer un blog para los proyectos que desarrollo. Esto sirve para dos cosas: Tener un registro ordenado de las cosas que hago Muchas pegas piden tener una página o un github actualizado, o incluso con proyectos. Sobre el primer punto, si bien ya tenía la página de github.io pero era recontra básica, (por no decir espantosa). Sobre los proyectos, tengo algunos pero no están muy presentables. Así que le empecé a meter mano y partí con mi primer blog, sobre como crear un blog. GhostMe inspiré en otro blog y su repo. No se como llegué al blog, pero se veía bien y ya había oido antes hablar sobre Ghost. Decidí revisar un par de tutoriales para convencerme: el tutorial de Fernando Paladini, este y este (seguí el primero) y en unos minutos ya estaba remodelando la interfaz del Blog. Algo que faltó en el tutorial, es mencionar que al hacer el commit después del npm install, demora siglos con los cambios de final de línea de Windows. DedBueno, agregué mi usuario, mis cuentas a twitter y empecé a redactar este blog, todo iba viento en popa. Solo faltaba hacer una prueba final, agregar este post, pushar a github y ver si se hacía la magia. Al hablar en condicional, me refiero a que no funcionó. Los tutoriales indican que hay que tener buster. Buster es un Brute force static site generator for Ghost, genera páginas estáticas (requeridas para la página personal de github) a partir de una instancia de un servidor local. En este caso el de Ghost. Lamentablemente, el repositorio está hardcodeado para funcionar con Linux y en este blog enseñan las modificaciones que son necesarias hacer al código del repositorio para que funcione en Windows. De hecho, ya hay un repo que tiene estas modificaciones listas. Bueno, pero eso no fue suficiente. Buster solo está disponible para Python2 y yo tengo Python3 instalado por lo que me pareció que la vuelta para hacerlo andar era muy larga. HexoPor consejo de PabloRe, pasé a Hexo. Hexo es otro Framework para blogs, que tiene incluida la funcionalidad para generar una página estática. Suena como algo más sencillo ahora. Lo único fue que como ya tenía el repositorio, el hexo init &lt;folder&gt; requiere una carpeta vacía, así que tuve que crear una carpeta temporal, luego mover los archivos dentro. La misma CLI daba esa solución. Muy amigable. Luego de hacer hexo server, estaba ahi mismo el tutorial para generar la página estática y hacer el deploy. Crucé los dedos, hice un hexo deploy y voilà. So easy. Ahora si amononar la página, cambiar el theme, agregar mi info personal y agregar este post. UpdateFunciona, maravillosamente bien. Debo mencionar que Ghost es mucho más profesional. Algunas de las cosas que, en el poco tiempo que lo ocupé, me gustaron: UI para editar el Markdown; Consola para manejar usuarios y los posts; AdemásAh, en el antíguo site, tenía un link a mi CV en GoogleDocs. y la version Overleaf de lecturaComo no quería perderlo, lo dejo acá, ya más adelante veré como lo coloco.","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://gabrieldelaparra.github.io/tags/Hexo/"},{"name":"Ghost","slug":"Ghost","permalink":"http://gabrieldelaparra.github.io/tags/Ghost/"},{"name":"Markdown","slug":"Markdown","permalink":"http://gabrieldelaparra.github.io/tags/Markdown/"},{"name":"Github","slug":"Github","permalink":"http://gabrieldelaparra.github.io/tags/Github/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-09-02T23:46:25.000Z","updated":"2017-11-02T03:20:41.369Z","comments":true,"path":"2017/09/02/hello-world/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://gabrieldelaparra.github.io/tags/Hexo/"},{"name":"HelloWorld","slug":"HelloWorld","permalink":"http://gabrieldelaparra.github.io/tags/HelloWorld/"}]}]}