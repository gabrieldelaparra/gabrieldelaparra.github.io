{"meta":{"title":"wororo","subtitle":"wororo","description":"proyectos, ideas, tecnología, ocio","author":"Gabriel De La Parra","url":"http://gabrieldelaparra.github.io"},"pages":[],"posts":[{"title":"learn d3.js - 01","slug":"learnd3js01","date":"2017-11-12T04:04:58.000Z","updated":"2017-11-12T05:14:41.045Z","comments":true,"path":"2017/11/12/learnd3js01/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/11/12/learnd3js01/","excerpt":"","text":"PackagesPara empezar a trabajar con D3 en jupyter, se trabajará con py_d3 1import py_d3 InitializePara empezar a ocupar la librería es necesario hacer un load con %load_ext py_d3. En algunos casos hay problemas al reabrir el notebook, por eso se cambia por %reload_ext py_d3. 1%reload_ext py_d3 ReferencesEn este Notebook, trabajaré en base al tutorial de Gabriel Coch. Ese tutorial es una traducción de otro tutorial de Scott Murray. El aporte de este tutorial es trabajarlo en Jupyter. Jupyter con py_d3Usando el tag %%d3 se puede correr código HTML y JavaScript directamente en una celda. Aquí algunos ejemplos. Text123%%d3 4.11.0Hello World! requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/4.11.0/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select0 = function(selection) { return _select(“#d3-cell-0”).select(selection);}d3.selectAll0 = function(selection) { return _select(“#d3-cell-0”).selectAll(selection);} Hello World! Links123%%d3 4.11.0&lt;a href=\"http://www.google.com\"&gt;Google&lt;/a&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select1 = function(selection) { return _select(“#d3-cell-1”).select(selection);}d3.selectAll1 = function(selection) { return _select(“#d3-cell-1”).selectAll(selection);} Google SVG12345678910%%d3 4.11.0&lt;svg&gt; &lt;circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"blue\" stroke=\"black\" stroke-width=\"5\"/&gt;&lt;/svg&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select2 = function(selection) { return _select(“#d3-cell-2”).select(selection);}d3.selectAll2 = function(selection) { return _select(“#d3-cell-2”).selectAll(selection);} Javascript12345%%d3 4.11.0&lt;script&gt; alert(\"Hello, world!\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select3 = function(selection) { return _select(“#d3-cell-3”).select(selection);}d3.selectAll3 = function(selection) { return _select(“#d3-cell-3”).selectAll(selection);} alert(“Hello, world!”); HTML Console12345%%d3 4.11.0&lt;script&gt; console.log(d3.selectAll(\"p\"));&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select4 = function(selection) { return _select(“#d3-cell-4”).select(selection);}d3.selectAll4 = function(selection) { return _select(“#d3-cell-4”).selectAll(selection);} console.log(d3.selectAll4(“p”)); d3.jsd3 es una librería que permite agregar y modificar elementos en la estructura del DOM de HTML. Una diferencia de trabajar directamente en un archivo HTML, es necesario cambiar d3.select(&quot;body&quot;).append(&quot;g&quot;) sino generar un elemento &lt;g /&gt; y ocupar d3.select(&quot;g&quot;). Añadir ElementosLo primero será crear elementos dentro de la celda de salida. En este caso, un texto. 12345678%%d3 4.11.0&lt;g /&gt;&lt;script&gt; d3.select(\"g\") .text(\"Hello World\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select5 = function(selection) { return _select(“#d3-cell-5”).select(selection);}d3.selectAll5 = function(selection) { return _select(“#d3-cell-5”).selectAll(selection);} d3.select5(“g”) .text(“Hello World”); HTML DOM ElementsSi quisiera agregar más de un párrafo, se pensaría intuitivamente que se debe repetir el código, sin embargo, dentro del DOM HTML, se trata de un solo elemento, llamado &lt;g /&gt;. Lo que sucede en la siguiente celda es que se agrega dos valores de texto al mismo elemento. 12345678%%d3 4.11.0&lt;g /&gt;&lt;script&gt; d3.select(\"g\").text(\"Hello World 1\"); d3.select(\"g\").text(\"Hello World 2\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select6 = function(selection) { return _select(“#d3-cell-6”).select(selection);}d3.selectAll6 = function(selection) { return _select(“#d3-cell-6”).selectAll(selection);} d3.select6(“g”).text(“Hello World 1”); d3.select6(“g”).text(“Hello World 2”); Identificadores de elementosAhora, en un archivo HTML, sería necesario seleccionar los elementos específicos. En este caso podemos ocupar un atributo id con un nombre dado. En el siguiente caso &lt;g id=&quot;g1&quot;&gt;, que puede ser seleccionado con .select(&quot;#g1&quot;). 123456789%%d3 4.11.0&lt;g id=\"g1\"/&gt;&lt;g id=\"g2\"/&gt;&lt;script&gt; d3.select(\"#g1\").text(\"Hello World 1\"); d3.select(\"#g2\").text(\"Hello World 2\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select7 = function(selection) { return _select(“#d3-cell-7”).select(selection);}d3.selectAll7 = function(selection) { return _select(“#d3-cell-7”).selectAll(selection);} d3.select7(“#g1”).text(“Hello World 1”); d3.select7(“#g2”).text(“Hello World 2”); Elementos con nombresUna alternativa a lo anterior, es agregar elementos con nombres propios. 123456789%%d3 4.11.0&lt;control1 /&gt;&lt;control2 /&gt;&lt;script&gt; d3.select(\"control1\").text(\"Hello World 1\"); d3.select(\"control2\").text(\"Hello World 2\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select8 = function(selection) { return _select(“#d3-cell-8”).select(selection);}d3.selectAll8 = function(selection) { return _select(“#d3-cell-8”).selectAll(selection);} d3.select8(“control1”).text(“Hello World 1”); d3.select8(“control2”).text(“Hello World 2”); Agregar Elementos al DOMPara poder trabajar correctamente con esto, es necesario agregar párrafos al elemento &lt;g /&gt;. Esto se realiza mediante .append(&quot;p&quot;). 12345678%%d3 4.11.0&lt;g /&gt;&lt;script&gt; d3.select(\"g\").append(\"p\").text(\"Hello World 1\"); d3.select(\"g\").append(\"p\").text(\"Hello World 2\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select9 = function(selection) { return _select(“#d3-cell-9”).select(selection);}d3.selectAll9 = function(selection) { return _select(“#d3-cell-9”).selectAll(selection);} d3.select9(“g”).append(“p”).text(“Hello World 1”); d3.select9(“g”).append(“p”).text(“Hello World 2”); Chaining methodsSi se desean agregar muchos párrafos, en vez de hacer las órdenes una a una, se pueden encadenar métodos para generar nuevos elementos. Al ocupar esta técnica, se puede simplificar el código. 123456789%%d3 4.11.0&lt;g /&gt;&lt;script&gt; d3.select(\"g\") .append(\"p\").text(\"New paragraph 1!\") .append(\"p\").text(\"New paragraph 2!\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select10 = function(selection) { return _select(“#d3-cell-10”).select(selection);}d3.selectAll10 = function(selection) { return _select(“#d3-cell-10”).selectAll(selection);} d3.select10(“g”) .append(“p”).text(“New paragraph 1!”) .append(“p”).text(“New paragraph 2!”); HTML StylesSe pueden agregar estilos de HTML a los elementos que se agreguen. 123456789%%d3 4.11.0&lt;g /&gt;&lt;script&gt; d3.select(\"g\") .text(\"Hello World\") .style(\"color\",\"#ff00ff\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select11 = function(selection) { return _select(“#d3-cell-11”).select(selection);}d3.selectAll11 = function(selection) { return _select(“#d3-cell-11”).selectAll(selection);} d3.select11(“g”) .text(“Hello World”) .style(“color”,”#ff00ff”); Trabajar con ArraysEn este caso, generamos un array.Luego agregamos de forma manual un párrafo por cada elemento. Los elementos se llaman con corchetes, con índices basados en cero. 1234567891011121314%%d3 4.11.0&lt;g /&gt;&lt;script&gt; var array = [ 5, 10, 15, 20, 25]; d3.select(\"g\") .append(\"p\").text(\"array[0]: \" + array[0]) .append(\"p\").text(\"array[1]: \" + array[1]) .append(\"p\").text(\"array[2]: \" + array[2]) .append(\"p\").text(\"array[3]: \" + array[3]) .append(\"p\").text(\"array[4]: \" + array[4]);&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select12 = function(selection) { return _select(“#d3-cell-12”).select(selection);}d3.selectAll12 = function(selection) { return _select(“#d3-cell-12”).selectAll(selection);} var array = [ 5, 10, 15, 20, 25]; d3.select12(“g”) .append(“p”).text(“array[0]: “ + array[0]) .append(“p”).text(“array[1]: “ + array[1]) .append(“p”).text(“array[2]: “ + array[2]) .append(“p”).text(“array[3]: “ + array[3]) .append(“p”).text(“array[4]: “ + array[4]); Arrays en d3Trabajar con los arrays es raro en d3. Tiene un órden de ejecución no tán intuitivo. En primera instancia se hace un .selectAll(“p”), incluso antes de haber agregado ningún (“p”) aún. Luego se hace una selección del array con .data(nombreDelArray) y luego un .enter(). Ahora, por cada elemento, agregamos un párrafo con New paragraph!. 12345678910111213%%d3 4.11.0&lt;g /&gt;&lt;script&gt; var array = [ 5, 10, 15, 20, 25]; d3.select(\"g\") .selectAll(\"p\") .data(array) .enter() .append(\"p\").text(\"New paragraph!\");&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select13 = function(selection) { return _select(“#d3-cell-13”).select(selection);}d3.selectAll13 = function(selection) { return _select(“#d3-cell-13”).selectAll(selection);} var array = [ 5, 10, 15, 20, 25]; d3.select13(“g”) .selectAll(“p”) .data(array) .enter() .append(“p”).text(“New paragraph!”); Array valuesEn el caso anterior, no se puede acceder a los valores del array, es necesario agregar una función que retorne el valor del arreglo: function(d) {return d;}. 123456789101112%%d3 4.11.0&lt;g /&gt;&lt;script&gt; var array = [ 5, 10, 15, 20, 25]; d3.select(\"g\") .selectAll(\"p\") .data(array).enter() .append(\"p\").text(function(d) &#123; return \"Array Item: \" + d; &#125;);&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select14 = function(selection) { return _select(“#d3-cell-14”).select(selection);}d3.selectAll14 = function(selection) { return _select(“#d3-cell-14”).selectAll(selection);} var array = [ 5, 10, 15, 20, 25]; d3.select14(“g”) .selectAll(“p”) .data(array).enter() .append(“p”).text(function(d) { return “Array Item: “ + d; }); FuncionesEn este caso se hace una función para hacer que cambie de color la función según el valor. 12345678910111213141516171819%%d3 4.11.0&lt;g /&gt;&lt;script&gt; var dataset = [ 5, 10, 15, 20, 25]; d3.select(\"g\") .selectAll(\"p\") .data(dataset).enter() .append(\"p\").text(function(d) &#123; return \"Array Item: \" + d; &#125;) .style(\"color\", function(d) &#123; if (d % 2 == 0) &#123; return \"red\";&#125; else &#123; return \"blue\"; &#125; &#125;);;&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select15 = function(selection) { return _select(“#d3-cell-15”).select(selection);}d3.selectAll15 = function(selection) { return _select(“#d3-cell-15”).selectAll(selection);} var dataset = [ 5, 10, 15, 20, 25]; d3.select15(“g”) .selectAll(“p”) .data(dataset).enter() .append(“p”).text(function(d) { return “Array Item: “ + d; }) .style(“color”, function(d) { if (d % 2 == 0) { return “red”;} else { return “blue”; } });; Refactor de funciones1234567891011121314151617%%d3 4.11.0&lt;g /&gt;&lt;script&gt; function printNumber(d) &#123; return \"Array Item: \" + d; &#125; function colorThis(d)&#123; return (d % 2 == 0) ? \"red\" : \"blue\" ; &#125; var dataset = [ 5, 10, 15, 20, 25]; d3.select(\"g\") .selectAll(\"p\") .data(dataset).enter() .append(\"p\").text(printNumber) .style(\"color\", colorThis);&lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select16 = function(selection) { return _select(“#d3-cell-16”).select(selection);}d3.selectAll16 = function(selection) { return _select(“#d3-cell-16”).selectAll(selection);} function printNumber(d) { return “Array Item: “ + d; } function colorThis(d){ return (d % 2 == 0) ? “red” : “blue” ; } var dataset = [ 5, 10, 15, 20, 25]; d3.select16(“g”) .selectAll(“p”) .data(dataset).enter() .append(“p”).text(printNumber) .style(“color”, colorThis); Otra función, para colorear las letras. Just for fun. 12345678910111213141516171819%%d3 4.11.0&lt;g /&gt;&lt;script&gt; function printLetter(d, i) &#123; return d; &#125; function randomColor(d, i)&#123; return '#'+(Math.random()*0xFFFFFF&lt;&lt;0).toString(16); &#125; var word = \"Hello World\"; d3.select(\"g\") .selectAll(\"a\") .data(word).enter() .append(\"a\").text(printLetter) .style(\"color\", randomColor ); &lt;/script&gt; requirejs.config({ paths: { d3: “//cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3” }}); require([‘d3’], function(d3) { window.d3 = d3;}); _select = d3.select; d3.select17 = function(selection) { return _select(“#d3-cell-17”).select(selection);}d3.selectAll17 = function(selection) { return _select(“#d3-cell-17”).selectAll(selection);} function printLetter(d, i) { return d; } function randomColor(d, i){ return ‘#’+(Math.random()*0xFFFFFF&lt;","categories":[],"tags":[{"name":"Jupyter","slug":"Jupyter","permalink":"http://gabrieldelaparra.github.io/tags/Jupyter/"},{"name":"d3js","slug":"d3js","permalink":"http://gabrieldelaparra.github.io/tags/d3js/"}]},{"title":"esteganografia","slug":"esteganografia","date":"2017-09-30T18:03:53.000Z","updated":"2017-12-01T19:41:21.000Z","comments":true,"path":"2017/09/30/esteganografia/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/30/esteganografia/","excerpt":"","text":"EsteganografíaEste proyecto consiste en esconder texto dentro de una imagen de tal forma que tanto el texto como la imagen no se vean (afectada en el caso de la imagen) a simple vista. Dicha técnica se conoce como Esteganografía. Se trabajará con Python para generar un mensaje codificado, de tal forma que contenta el número de bits significativos de la imagen sobre los que se esconde el texto, el texto como tal y un mensaje de fin. Dicho mensaje de término se agregó para indicarle al código que la lectura debería llegar hasta dicho punto. Repo en Github Reporte en Overleaf IntroducciónLa Esteganografía existe desde hace siglos. Según Wikipedia se aplicó en las primeras veces por Heródoto en el libro de las Historias: “En este libro describe cómo un personaje tomó un cuadernillo de dos hojas o tablillas; rayó bien la cera que las cubría y en la madera misma grabó el mensaje y lo volvió a cubrir con cera regular. Otra historia, en el mismo libro, relata cómo otro personaje había rasurado a navaja la cabeza de su esclavo de mayor confianza, le tatuó el mensaje en el cuero cabelludo, esperó después a que le volviera a crecer el cabello y lo mandó al receptor del mensaje, con instrucciones de que le rasuraran la cabeza.” Imports1from skimage import io Imagen originalPara abrir la imagen y mostrarla, ocuparemos scikit-image.io.imread() 12imageFilename = r\"imagen.png\"image = io.imread(imageFilename) Preview12io.imshow(image)io.show() Lectura del archivoEl archivo se puede ver como un arreglo. En este caso se trata de una imagen en blanco y negro, por lo que el arreglo tiene un shape de 248x300. Imagen como Array12print(image.shape)image (246, 300) array([[49, 50, 48, ..., 58, 55, 55], [47, 47, 49, ..., 56, 57, 55], [48, 48, 49, ..., 57, 56, 57], ..., [71, 70, 70, ..., 70, 69, 70], [69, 71, 71, ..., 70, 72, 71], [69, 68, 69, ..., 71, 72, 71]], dtype=uint8) Idea centralImagen Cada pixel de la imagen corresponde a un número del arreglo: [49 50 48 … 58 55 55] Corresponde a la primera fila de la imagen. Binario Cada uno de esos bits se puede representar como un número binario: 49, por ejemplo es 00110001 en binario. De esta forma, la imagen quedará como: [ 00110001 00110010 00110000 … 00111010 00110111 00110111 ] La idea en esteganografía, es esconder el texto en la imagen, usando los bits menos significativos. Máscara Si se utilizaran 2 bit significativo, los bits que se ocuparían serían los que tienen x: [ 001100xx 001100xx 001100xx … 001110xx 001101xx 001101xx ] Texto Así, para esconder una letra, por ejemplo la “h”, se debe convertir esta imagen a un número. El número ASCII para la h es 104. 104 en binario, sería: 01101000 Esteganografía Lo que implica, que se pueden colocar 2 números en cada pixel de la imagen h: 01 10 10 00 en [ 001100xx 001100xx 001100xx … 001110xx 001101xx 001101xx ]: [ 00110001 00110010 00110010 … ] Haciendo esto y ocupando un número de bits bajo, el texto puede quedar escondido en la imagen, sin que sea vea a simple vista. Texto de pruebaEl texto se carga por open, con permisos unicamente de lectura. 123textFilename = r\"texto.txt\"text = open(textFilename,'r').read()print(text) Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus auctor maximus dignissim. Etiam luctus elit nec risus varius volutpat. Vivamus arcu ante, tempus nec luctus commodo, blandit vel neque. Pellentesque semper posuere purus, et finibus leo accumsan non. Sed sed felis vel erat pretium molestie. Nulla facilisi. Proin vel lacus et leo tristique luctus eu nec nulla. Nullam finibus lobortis porta. Vestibulum sit amet lacus eros. Aliquam tempus augue quis lacus gravida aliquet. Maecenas eget purus est. Etiam ac lectus ac magna commodo molestie in eget ante. Vestibulum porta mauris nec risus finibus, nec elementum purus vulputate. Nunc non eros lobortis, vestibulum nibh eget, sagittis justo. Suspendisse eget tellus vitae dolor fermentum elementum. Nulla luctus nulla vel volutpat dictum. Morbi ac nulla interdum, semper lacus quis, eleifend eros. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Suspendisse potenti. Suspendisse potenti. Cras eget massa urna. Pellentesque quam neque, euismod sagittis eros sed, consequat fringilla augue. In ac euismod diam. Morbi maximus semper erat, pulvinar efficitur ligula congue eu. Donec ante arcu, feugiat sit amet tincidunt in, interdum id nibh. In non posuere nisl. Vivamus vitae justo in tellus tincidunt facilisis in ut dui. Vestibulum sed mauris aliquet, blandit lacus sit amet, ultrices nisl. Aliquam eget pharetra mi, eget venenatis enim. Vivamus a placerat enim. Donec varius aliquet velit, id mollis massa ultrices sit amet. Mauris lacus nunc, euismod non dignissim at, consectetur vitae enim. Phasellus volutpat leo urna, a posuere felis volutpat quis. Ut elementum urna sed arcu fermentum ultricies. Mauris at massa diam. Vestibulum id ipsum rutrum, ultrices metus id, pharetra tortor. Vestibulum lacinia odio nec faucibus lobortis. Curabitur convallis, velit quis feugiat scelerisque, eros elit lobortis tellus, non tempor lectus dolor non risus. Suspendisse a condimentum mauris. Cras finibus nec lacus at consequat. Donec et neque et nibh placerat efficitur vel non magna. Mauris augue nunc, placerat quis tellus eu, viverra fermentum quam. Mauris at metus pretium, rhoncus nisi vitae, scelerisque elit. In massa erat, dignissim quis enim in, egestas aliquam dolor. Morbi condimentum blandit placerat. Cras ultricies, nisi in tincidunt facilisis, lacus nibh iaculis mi, vitae cursus quam sem sit amet urna. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed nisi lectus, placerat at scelerisque sollicitudin, cursus eget erat. Cras eu volutpat nisl, sit amet tincidunt nisl. Proin a elit elit. Sed et lectus fermentum, congue est vel, mattis mi. CodificaciónEl proceso de codificación y decodificación se realizarán por medio de operaciones a nivel de bits. El procedimiento se podría resumir de la siguiente manera: - Calcular la máscara - Generar una lista de bits que contienen el texto codificado - Aplicar la codificacion a la imagen Calculo de la máscaraPara calculár la máscara, se definirá una variable que indica el número de bits (nbit) a usar. Para el valor de la máscara, se calcula el valor máximo para un byte/pixel (0-255) y se le resta el $2^nbits$. De esta forma, por ejemplo, para un nbit de 3 se tiene una máscara de 0b 1111 1011. Representación binaria de máscara12nbits = 4\"&#123;0:b&#125;\".format(nbits) &apos;100&apos; De largo 81\"&#123;0:&#123;fill&#125;8b&#125;\".format(nbits, fill='0') &apos;00000100&apos; Completando los números anteriores12trailing = 2**(int(nbits))-1trailing 15 1\"&#123;0:&#123;fill&#125;8b&#125;\".format(trailing, fill='0') &apos;00001111&apos; A la inversa12inv = 255 - (2**(int(nbits))-1)inv 240 1\"&#123;0:&#123;fill&#125;8b&#125;\".format(inv, fill='0') &apos;11110000&apos; Refactor12def getMask(nbits): return 255-(2**(int(nbits)-1)) Así, las máscaras que ocuparemos para los distintos bytes serán: Test12for i in range(1,9): print(bin(getMask(i))) 0b11111110 0b11111101 0b11111011 0b11110111 0b11101111 0b11011111 0b10111111 0b1111111 Codificación del texto a bitsLa generación de una lista con el texto codificado está compuesta de 3 partes: Agregar 4 bits que indican la cantidad de bits significativos con los que se encriptó la imagen. Convertir los caracteres (bytes) a bits. Agregar una marca para indicar el final del archivo. El proceso final, debe dar por resultado una imagen del siguiente tipo: 1234567891011121314151617%%html&lt;style type=\"text/css\"&gt;.tg &#123;border-collapse:collapse;border-spacing:0;&#125;.tg td&#123;font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;&#125;.tg th&#123;font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;&#125;.tg .tg-a080&#123;background-color:#9aff99;vertical-align:top&#125;.tg .tg-gr78&#123;background-color:#ffce93;vertical-align:top&#125;.tg .tg-ufe5&#123;background-color:#34cdf9;vertical-align:top&#125;&lt;/style&gt;&lt;table class=\"tg\"&gt; &lt;tr&gt; &lt;th class=\"tg-a080\"&gt;Numero de bits&lt;/th&gt; &lt;th class=\"tg-gr78\"&gt;-----------------Texto Codificado-----------------&lt;/th&gt; &lt;th class=\"tg-ufe5\"&gt;Final del texto&lt;/th&gt; &lt;/tr&gt;&lt;/table&gt; .tg {border-collapse:collapse;border-spacing:0;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}.tg .tg-a080{background-color:#9aff99;vertical-align:top}.tg .tg-gr78{background-color:#ffce93;vertical-align:top}.tg .tg-ufe5{background-color:#34cdf9;vertical-align:top} Numero de bits —————–Texto Codificado—————– Final del texto Texto CodificadoConvertir los caracteres a bits se logra de la misma manera. En la medida que se desplazan ($&gt;&gt;$) y se aislan ($\\&amp; 1$) se van agregando a la lista. El código se puede apreciar a continuación. Caracter a codificar12test = \"h\"test &apos;h&apos; En números12char = ord(test)char 104 En Binario1\"&#123;0:&#123;fill&#125;8b&#125;\".format(char, fill='0') &apos;01101000&apos; A Array1234byte = []for i in range(0,8): byte.insert(0, char &amp; 1) char = char &gt;&gt; 1 1byte [0, 1, 1, 0, 1, 0, 0, 0] Con un texto1234567891011121314def getEncodedText(nbits, text): encodedText = [] #Convertir cada caracter a bits y agregarlos a una lista: for char in text: byte = [] tmp = ord(char) for i in range(0,8): byte.append(tmp &amp; 1) tmp = tmp &gt;&gt; 1 # Agregar bytes a la lista: [encodedText.append(i) for i in byte[::-1]] return encodedText 12345def testEncoding(letter): print(\"letter\\t\", letter) print(\"Ordinal\\t\", ord(letter)) print(\"Binary\\t\", bin(ord(letter))) print(\"Encode\\t\", getEncodedText(0, letter)) 1testEncoding(\"h\") letter h Ordinal 104 Binary 0b1101000 Encode [0, 1, 1, 0, 1, 0, 0, 0] Número de bitsPara agregar el número de bits significativos con los que se encriptó la imagen se desplaza hacia la derecha 1 uno la cantidad de veces que se especifica con nBits. El proceso se realiza con los operadores “&gt;&gt;” y $”\\&amp;”$. El código se aprecia a continuación: 123456789def getEncodedNbits(nbits): encodedNbits = [] tmp = int(nbits) for i in range(0,4): encodedNbits.append(tmp &amp; 1) tmp = tmp &gt;&gt; 1 return encodedNbits Test12for i in range(0,32): print(i,\"\\t\", getEncodedNbits(i)) 0 [0, 0, 0, 0] 1 [1, 0, 0, 0] 2 [0, 1, 0, 0] 3 [1, 1, 0, 0] 4 [0, 0, 1, 0] 5 [1, 0, 1, 0] 6 [0, 1, 1, 0] 7 [1, 1, 1, 0] 8 [0, 0, 0, 1] 9 [1, 0, 0, 1] 10 [0, 1, 0, 1] 11 [1, 1, 0, 1] 12 [0, 0, 1, 1] 13 [1, 0, 1, 1] 14 [0, 1, 1, 1] 15 [1, 1, 1, 1] 16 [0, 0, 0, 0] 17 [1, 0, 0, 0] 18 [0, 1, 0, 0] 19 [1, 1, 0, 0] 20 [0, 0, 1, 0] 21 [1, 0, 1, 0] 22 [0, 1, 1, 0] 23 [1, 1, 1, 0] 24 [0, 0, 0, 1] 25 [1, 0, 0, 1] 26 [0, 1, 0, 1] 27 [1, 1, 0, 1] 28 [0, 0, 1, 1] 29 [1, 0, 1, 1] 30 [0, 1, 1, 1] 31 [1, 1, 1, 1] Final del TextoEl mismo proceso se ocupara para la marca del EOF. En ese caso se ocupó la siguiente variable. 1END_OF_FILE = \"$EOF\" 123456789101112131415161718192021222324252627def getEncodedText(nbits, text): encodedText = [] #Convertir cada caracter a bits y agregarlos a una lista: for char in text: byte = [] tmp = ord(char) for i in range(0,8): byte.append(tmp &amp; 1) tmp = tmp &gt;&gt; 1 # Agregar byts a la lista: [encodedText.append(i) for i in byte[::-1]] # Convertir cada caracter a bits y agregarlos a una lista: for char in END_OF_FILE: byte = [] tmp = ord(char) for i in range(0, 8): byte.append(tmp &amp; 1) tmp = tmp &gt;&gt; 1 # Agregar byts a la lista: [encodedText.append(i) for i in byte[::-1]] #Insertar al inicio los NBits para poder después decriptar: [encodedText.insert(0, i) for i in getEncodedNbits(nbits)] return encodedText Codificación del texto en la imagenPara aplicar la codificación a la imagen se recorre la imagen como un arreglo de dos dimensiones, entendiendo que cada pixel se comporta como un byte, que compone una matriz que describe los distintos tonos de grises que componen la imagen. En este loop se aplica la máscara a cada byte y se agrega el texto desde la lista calculada anteriormente. El proceso se realiza por el siguiente código: 12345678910111213141516171819def encode(imageFilename, textFilename, nbits): image = io.imread(imageFilename) text = open(textFilename,'r').read() mask = getMask(nbits) encodedText = getEncodedText(nbits, text) textCount = 0 for row in range(0,len(image)): for column in range(0,len(image[row])): #TODO: Check que el texto entre en la imagen; Tirar exception; if(textCount &lt; len(encodedText)): if(textCount &lt; 4): image[row][column] = (image[row][column] &amp; getMask(1)) | (encodedText[textCount]) else: image[row][column] = (image[row][column] &amp; mask) | (encodedText[textCount] &lt;&lt; int(nbits)-1) textCount += 1 return image Pruebas de codificaciónHa de notarse que los primeros 4 bits, que describen los nBits, se aplican siempre al bit menos significativo para que el decodificador los pueda leer desde la misma entrada. Como se revisará más adelante, la idea de agregarlos en el LSB es no alterer visualmente la imagen. El resultado de aplicar la codificación tiene distintos resultados según el bit significativo que se ocupe. Es recomendable aplicarlo para un N&lt;=2. Para N mayores, la imagen empieza a distorcionarse por la modificación de los colores de la misma. En las siguientes imagenes se puede apreciar los distintos resultados: 123image = encode(imageFilename, textFilename, 1)io.imshow(image)io.show() 123image = encode(imageFilename, textFilename, 4)io.imshow(image)io.show() 123image = encode(imageFilename, textFilename, 5)io.imshow(image)io.show() 123image = encode(imageFilename, textFilename, 8)io.imshow(image)io.show() DecodificaciónPara la decodificación, se realiza el proceso inverso. En primera instancia se leen los nbits de los primeros 4 bits y posteriormente se lee el resto de los caracteres a un arreglo. Se termina este proceso cuando se encuentra el EOF designado. El proceso se puede apreciar por el siguiente código: 12def bitstring_to_bytes(s): return int(s, 2).to_bytes(len(s) // 8, byteorder='big') Decodificar texto12345def decodeText(encodedText): encodedTextNoBits = encodedText bitString = \"\".join([str(i) for i in encodedTextNoBits]) decodedText = str(bitstring_to_bytes(bitString))[2:-1] return decodedText Decodificación de imagen12345678910111213141516171819def decode(imageFilename): image = io.imread(imageFilename) encodedText = [] textCount = 0 nbits = 0 for row in range(0,len(image)): for column in range(0,len(image[row])): if textCount &lt; 4: encodedText.append(image[row][column] &amp; 1) else: if textCount == 4: nbits = 8*encodedText[0] + 4*encodedText[1] + 2*encodedText[2]+ 1*encodedText[3] encodedText.append((image[row][column] &gt;&gt; (nbits-1)) &amp; 1) if((textCount+5)%8 == 0 and textCount &gt; 36): if(decodeText(encodedText[-32:]) == END_OF_FILE): return decodeText(encodedText[4:-32]) textCount += 1 Pruebas de decodificación1print(decode(\"imagen_out.png\")) Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus auctor maximus dignissim. Etiam luctus elit nec risus varius volutpat. Vivamus arcu ante, tempus nec luctus commodo, blandit vel neque. Pellentesque semper posuere purus, et finibus leo accumsan non. Sed sed felis vel erat pretium molestie. Nulla facilisi. Proin vel lacus et leo tristique luctus eu nec nulla. Nullam finibus lobortis porta. Vestibulum sit amet lacus eros. Aliquam tempus augue quis lacus gravida aliquet.\\n\\nMaecenas eget purus est. Etiam ac lectus ac magna commodo molestie in eget ante. Vestibulum porta mauris nec risus finibus, nec elementum purus vulputate. Nunc non eros lobortis, vestibulum nibh eget, sagittis justo. Suspendisse eget tellus vitae dolor fermentum elementum. Nulla luctus nulla vel volutpat dictum. Morbi ac nulla interdum, semper lacus quis, eleifend eros.\\n\\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Suspendisse potenti. Suspendisse potenti. Cras eget massa urna. Pellentesque quam neque, euismod sagittis eros sed, consequat fringilla augue. In ac euismod diam. Morbi maximus semper erat, pulvinar efficitur ligula congue eu. Donec ante arcu, feugiat sit amet tincidunt in, interdum id nibh. In non posuere nisl. Vivamus vitae justo in tellus tincidunt facilisis in ut dui. Vestibulum sed mauris aliquet, blandit lacus sit amet, ultrices nisl. Aliquam eget pharetra mi, eget venenatis enim. Vivamus a placerat enim.\\n\\nDonec varius aliquet velit, id mollis massa ultrices sit amet. Mauris lacus nunc, euismod non dignissim at, consectetur vitae enim. Phasellus volutpat leo urna, a posuere felis volutpat quis. Ut elementum urna sed arcu fermentum ultricies. Mauris at massa diam. Vestibulum id ipsum rutrum, ultrices metus id, pharetra tortor. Vestibulum lacinia odio nec faucibus lobortis. Curabitur convallis, velit quis feugiat scelerisque, eros elit lobortis tellus, non tempor lectus dolor non risus. Suspendisse a condimentum mauris. Cras finibus nec lacus at consequat. Donec et neque et nibh placerat efficitur vel non magna. Mauris augue nunc, placerat quis tellus eu, viverra fermentum quam. Mauris at metus pretium, rhoncus nisi vitae, scelerisque elit.\\n\\nIn massa erat, dignissim quis enim in, egestas aliquam dolor. Morbi condimentum blandit placerat. Cras ultricies, nisi in tincidunt facilisis, lacus nibh iaculis mi, vitae cursus quam sem sit amet urna. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed nisi lectus, placerat at scelerisque sollicitudin, cursus eget erat. Cras eu volutpat nisl, sit amet tincidunt nisl. Proin a elit elit. Sed et lectus fermentum, congue est vel, mattis mi. ConclusionesEl proceso de codificación de texto en imágenes permite esconder texto. Una de las limitaciones principales tiene que ver con que el texto que se utilice debe ser menor en longitud al tamaño de la imagen. Lo anterior podría compensarse cuando se utilizan imánenes en colores ya que se triplica la cantidad de bytes disponibles para la codificación. Si se ocupan imágenes con transparencias (alpha). Podría agregarse una dimensión más, siempre y cuando considerando que sería más oportuno hacerlo con el bit menos significativo. Uno de los principales problemas para manejar la encriptación tuvo que ver con el órden de los bits en la lista de los bits. Otro punto interesante fue el delimitador final que se utilizó. Se considera que podria ser posible incluir el tamaño de la imagen al principio, sin embargo esto sería variable dependiento del tamaño. Finalmente se puede mencionar que existen varios paquetes públicos para realizar esta encriptación. Algunos con varias opciones de configuración.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://gabrieldelaparra.github.io/tags/Python/"},{"name":"Images","slug":"Images","permalink":"http://gabrieldelaparra.github.io/tags/Images/"},{"name":"CC5508","slug":"CC5508","permalink":"http://gabrieldelaparra.github.io/tags/CC5508/"}]},{"title":"djangoHeroku","slug":"djangoHeroku","date":"2017-09-23T22:18:16.000Z","updated":"2017-12-01T17:26:42.288Z","comments":true,"path":"2017/09/23/djangoHeroku/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/23/djangoHeroku/","excerpt":"","text":"Base Django-HerokuGit should be installed Virtual EnvironmentRequirements12sudo pip install virtualenvsudo pip install virtualenvwrapper Create a Virtual Environment1$ mkvirtualenv djangoApp DjangoRequirements123456789101112$ pip install django$ pip install python_dotenv``` ## Create Project``` bash$ cd djangoApp$ django-admin.py startproject --template=https://github.com/heroku/heroku-django-template/archive/master.zip --name=Procfile myHerokuProject$ cd myHerokuProject$ pip install -r requirements.txt$ echo &quot;db.sqlite3&quot; &gt;&gt; .gitignore Remove Secret Key (Using python_dotenv)123$ echo \"python_dotenv\" &gt;&gt; requirements.txt$ cd myHerokuProject$ touch .env Move SECRET_KEY=key to the .env file (should be in the same folder as settings.py) Add the following lines to your settings.py: 123456...from dotenv import load_dotenv, find_dotenv...load_dotenv(find_dotenv())SECRET_KEY = os.environ.get('SECRET_KEY')... Exit directory 1$ cd .. GithubCreate Github Repo myHerokuProjectGit12345$ git init$ git remote add origin https://github.com/[githubUsername]/[myHerokuProjectGit].git$ git add -A$ git commit -m \"django template initial commit\"$ git push -u origin master HerokuRequirements1234$ wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh``` ## Create Heroku App $ heroku login$ heroku create example-project-name$ heroku config:set DISABLE_COLLECTSTATIC=11234**Heroku Web:** Settings Tab -&gt; Reveal Config Vars -&gt; Add: SECRET_KEY : secret key value**Heroku Web:** Deploy Tab -&gt; Connect to Github -&gt; Connect -&gt; Enable Automatic Deploys $ git push heroku master1234## Commands in Heroku## Run Local $ heroku local12### Migrate on server side $ heroku run python manage.py makemigrations$ heroku run python manage.py migrate12### Create Admin on server side $ heroku run python manage.py createsuperuser```","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://gabrieldelaparra.github.io/tags/Python/"},{"name":"Github","slug":"Github","permalink":"http://gabrieldelaparra.github.io/tags/Github/"},{"name":"Django","slug":"Django","permalink":"http://gabrieldelaparra.github.io/tags/Django/"},{"name":"Heroku","slug":"Heroku","permalink":"http://gabrieldelaparra.github.io/tags/Heroku/"}]},{"title":"freshStart","slug":"freshStart","date":"2017-09-16T23:40:34.000Z","updated":"2017-12-01T17:22:59.904Z","comments":true,"path":"2017/09/16/freshStart/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/16/freshStart/","excerpt":"","text":"Ubuntu from scratchIt’s been a while since I last formatted and wasted a whole day doing this. So. I just documented everything for future uses. :) Git1234$ sudo apt install git$ git config --global user.email \"ignacio.delaparra@gmail.com\"$ git config --global user.name \"Gabriel De La Parra\"$ git config --global credential.helper 'cache --timeout=14400' #4 horas Create SSH Key for git1234$ ssh-keygen -t rsa -b 4096 -C \"ignacio.delaparra@gmail.com\"$ ssh-add ~/.ssh/id_rsa$ sudo apt install xclip$ xclip -sel clip &lt; ~/.ssh/id_rsa.pub Add to github via web. Vim1$ sudo apt install vim Pip1$ sudo apt install python3-pip VSCode Download. Install. PluginsMarkdown hnw.vscode-auto-open-markdown-preview yzhang.markdown-all-in-one telesoho.vscode-markdown-paste-image (requires sudo apt install xclip) mdickin.markdown-shortcuts evilz.vscode-reveal Git codezombiech.gitignore Python donjayamanne.python Jupyter N/A yet. Bash autocomplete ignore case12$ if [ ! -a ~/.inputrc ]; then echo '$include /etc/inputrc' &gt; ~/.inputrc; fiecho 'set completion-ignore-case On' &gt;&gt; ~/.inputrc Oh-my-ZSH12$ sudo apt install zsh$ sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" Add to .zshrc:123456789ZSH_THEME=\"agnoster\"plugins=(git python django heroku node pip virtualenv zsh-autosuggestions)alias py=\"python3\"alias pip=\"pip3\"alias gcm=\"git commit -m\"alias pm=\"python3 manage.py\"workon default Hack Font Download. Install. Terminator1$ sudo apt install terminator Cambiar font por Hack. zsh-autosuggestions1$ git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions Add to .zshrc: (included before) 1plugins=(zsh-autosuggestions) Node via nvm1$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash Add to .zshrc:123export NVM_DIR=\"$HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" [ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\" 1$ nvm install stable Virtual Environments1234sudo pip install virtualenvsudo pip install virtualenvwrappermkvirtualenv default Add to .zshrc:12345export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/Develexport VIRTUALENVWRAPPER_SCRIPT=/usr/local/bin/virtualenvwrapper.shexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3source /usr/local/bin/virtualenvwrapper_lazy.sh Cheat Sheet Run: workon A list of environments, empty, is printed. Run: mkvirtualenv temp A new environment, temp is created and activated. Run: workon This time, the temp environment is included. Run: deactivate to exit the environment.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://gabrieldelaparra.github.io/tags/Python/"},{"name":"Github","slug":"Github","permalink":"http://gabrieldelaparra.github.io/tags/Github/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://gabrieldelaparra.github.io/tags/Ubuntu/"},{"name":"ZSH","slug":"ZSH","permalink":"http://gabrieldelaparra.github.io/tags/ZSH/"},{"name":"VirtualEnv","slug":"VirtualEnv","permalink":"http://gabrieldelaparra.github.io/tags/VirtualEnv/"}]},{"title":"hexoBlog","slug":"hexoBlog","date":"2017-09-10T02:25:32.000Z","updated":"2017-11-02T03:20:56.709Z","comments":true,"path":"2017/09/09/hexoBlog/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/09/hexoBlog/","excerpt":"","text":"Creating a GithubPage Blog with HexoGithub Pages Github Web: Create repo called username.github.io, where username is your username. In my case: https://github.com/gabrieldelaparra/gabrieldelaparra.github.io Github Web: Create another (private) repo called hexoBlog, where your hexo blog will be stored. In my case: https://github.com/gabrieldelaparra/hexoBlog Install Hexo1$ npm install -g hexo-cli Create Blog123$ hexo init hexoBlog$ cd hexoBlog$ npm install Test Server1$ hexo server Set User Information1$ vi _config.yml _config.yml: 123456789101112131415161718192021222324252627282930# Sitetitle: wororosubtitle: wororo.description: proyectos, ideas, tecnología, ocioauthor: Gabriel De La Parralanguage: entimezone: America/Santiago# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://gabrieldelaparra.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Writingnew_post_name: :year-:month-:day-:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: Connect to git12345$ git init$ git remote add origin https://github.com/gabrieldelaparra/hexoBlog.git$ git add .$ git commit -m &quot;Empty Hexo Blog&quot;$ git push -u origin master ThemesArcher123$ cd hexoBlog$ npm install hexo-generator-json-content --save$ git clone https://github.com/fi3ework/hexo-theme-archer.git themes/archer _config.yml:1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: archer themes/archer/_config.yml: 1234567891011121314151617181920212223242526# ========== Profile ========== #avatar: /avatar/me.jpgauthor: gabrieldelaparrasignature: wororosocial: email: ignacio.delaparra@gmail.com github: //github.com/gabrieldelaparra twitter: //twitter.com/gabeldelaostia # facebook: # instagram: # stack-overflow: # linkedin: # others: # rss: /atom.xmlabout: enable: false image: '/intro/about-page.jpg'# ========== Site ========== #SEO_title: wororomain_title: wororo.subtitle: proyectos, ideas, tecnología, ociosite_header_image: '/intro/back1.jpg'post_header_image: '/intro/back1.jpg'_404_image: '/intro/404.jpg'show_dates: Help!I’m not sure how to properly handle the following: The archer theme is another git repo inside my hexoBlog repo (submodule, maybe, but). I want to be able to save my themes/archer/_config.yml to my repository. This for the case where I want to clone my own repository in another computer, or plain backup. If I just do a git clone archer, and then delete the .git folder, then the files will be added to my repo, but then, I will not get any updates to the theme if the owner adds new features. I think that I could do a fork and then merge changes manually in the future. I’m not sure how submodules work right now. Any suggestions? Deployment to Git12$ npm install hexo-deployer-git --save$ vi _config.yml _config.yml: 12345# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/gabrieldelaparra/gabrieldelaparra.github.io Adding new Posts and DeployingCreate Post1234$ hexo new postNameINFO Created: ~/blog/source/_posts/YYYY-MM-dd-postName.md$ code source/_posts/YYYY-MM-dd-postName.md Deploy12$ hexo clean$ hexo deploy -g","categories":[],"tags":[{"name":"Github","slug":"Github","permalink":"http://gabrieldelaparra.github.io/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"http://gabrieldelaparra.github.io/tags/Hexo/"}]},{"title":"firstBorn","slug":"firstBorn","date":"2017-09-03T00:48:56.000Z","updated":"2017-11-02T03:20:29.669Z","comments":true,"path":"2017/09/02/firstBorn/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/02/firstBorn/","excerpt":"","text":"Nace un BlogHabía estado mucho tiempo pensando en hacer un blog para los proyectos que desarrollo. Esto sirve para dos cosas: Tener un registro ordenado de las cosas que hago Muchas pegas piden tener una página o un github actualizado, o incluso con proyectos. Sobre el primer punto, si bien ya tenía la página de github.io pero era recontra básica, (por no decir espantosa). Sobre los proyectos, tengo algunos pero no están muy presentables. Así que le empecé a meter mano y partí con mi primer blog, sobre como crear un blog. GhostMe inspiré en otro blog y su repo. No se como llegué al blog, pero se veía bien y ya había oido antes hablar sobre Ghost. Decidí revisar un par de tutoriales para convencerme: el tutorial de Fernando Paladini, este y este (seguí el primero) y en unos minutos ya estaba remodelando la interfaz del Blog. Algo que faltó en el tutorial, es mencionar que al hacer el commit después del npm install, demora siglos con los cambios de final de línea de Windows. DedBueno, agregué mi usuario, mis cuentas a twitter y empecé a redactar este blog, todo iba viento en popa. Solo faltaba hacer una prueba final, agregar este post, pushar a github y ver si se hacía la magia. Al hablar en condicional, me refiero a que no funcionó. Los tutoriales indican que hay que tener buster. Buster es un Brute force static site generator for Ghost, genera páginas estáticas (requeridas para la página personal de github) a partir de una instancia de un servidor local. En este caso el de Ghost. Lamentablemente, el repositorio está hardcodeado para funcionar con Linux y en este blog enseñan las modificaciones que son necesarias hacer al código del repositorio para que funcione en Windows. De hecho, ya hay un repo que tiene estas modificaciones listas. Bueno, pero eso no fue suficiente. Buster solo está disponible para Python2 y yo tengo Python3 instalado por lo que me pareció que la vuelta para hacerlo andar era muy larga. HexoPor consejo de PabloRe, pasé a Hexo. Hexo es otro Framework para blogs, que tiene incluida la funcionalidad para generar una página estática. Suena como algo más sencillo ahora. Lo único fue que como ya tenía el repositorio, el hexo init &lt;folder&gt; requiere una carpeta vacía, así que tuve que crear una carpeta temporal, luego mover los archivos dentro. La misma CLI daba esa solución. Muy amigable. Luego de hacer hexo server, estaba ahi mismo el tutorial para generar la página estática y hacer el deploy. Crucé los dedos, hice un hexo deploy y voilà. So easy. Ahora si amononar la página, cambiar el theme, agregar mi info personal y agregar este post. UpdateFunciona, maravillosamente bien. Debo mencionar que Ghost es mucho más profesional. Algunas de las cosas que, en el poco tiempo que lo ocupé, me gustaron: UI para editar el Markdown; Consola para manejar usuarios y los posts; AdemásAh, en el antíguo site, tenía un link a mi CV en GoogleDocs. y la version Overleaf de lecturaComo no quería perderlo, lo dejo acá, ya más adelante veré como lo coloco.","categories":[],"tags":[{"name":"Github","slug":"Github","permalink":"http://gabrieldelaparra.github.io/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"http://gabrieldelaparra.github.io/tags/Hexo/"},{"name":"Ghost","slug":"Ghost","permalink":"http://gabrieldelaparra.github.io/tags/Ghost/"},{"name":"Markdown","slug":"Markdown","permalink":"http://gabrieldelaparra.github.io/tags/Markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-09-02T23:46:25.000Z","updated":"2017-11-02T03:20:41.369Z","comments":true,"path":"2017/09/02/hello-world/","link":"","permalink":"http://gabrieldelaparra.github.io/2017/09/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://gabrieldelaparra.github.io/tags/Hexo/"},{"name":"HelloWorld","slug":"HelloWorld","permalink":"http://gabrieldelaparra.github.io/tags/HelloWorld/"}]}]}